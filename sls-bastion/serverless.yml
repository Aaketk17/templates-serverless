org: serverlessguru
app: patterns
service: sls-bastion

provider:
  name: aws
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "us-east-2"}

custom:
  base: ${self:service}-${self:provider.stage}

  params:
    VPC_ID: ${param:SSM_BASTION_VPC_ID} # vpc-xxxxxxxxx
    SUBNET_ID_1: ${param:SSM_BASTION_SUBNET_ID_1} # subnet-xxxxxxxx
    CIDR_IP: ${param:SSM_BASTION_CIDR_IP} # x.x.x.x/xx
    ROUTE_TABLE_ID_1: ${param:SSM_BASTION_ROUTE_TABLE_ID_1} # rtb-xxxxxxxx
    INSTANCE_AMI_ID: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    INSTANCE_TYPE: t3.nano
    ASSOCIATE_PUBLIC_IP_ADDRESS: false

resources:
  Resources:
    VpcEndpointSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: HTTPS from the subnet
        VpcId: ${self:custom.params.VPC_ID}
        SecurityGroupIngress: 
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: ${self:custom.params.CIDR_IP}
        Tags: 
          - Key: Name
            Value: ${self:custom.base}-vpce-https-sg

    VpcEndpointSsm:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
        VpcEndpointType: Interface
        PrivateDnsEnabled: true
        VpcId: ${self:custom.params.VPC_ID}
        SubnetIds: 
          - ${self:custom.params.SUBNET_ID_1}
        SecurityGroupIds:
          - !GetAtt VpcEndpointSG.GroupId

    VpcEndpointSsmMessages:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
        VpcEndpointType: Interface
        PrivateDnsEnabled: true
        VpcId: ${self:custom.params.VPC_ID}
        SubnetIds: 
          - ${self:custom.params.SUBNET_ID_1}
        SecurityGroupIds:
          - !GetAtt VpcEndpointSG.GroupId

    VpcEndpointEc2messages:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
        VpcEndpointType: Interface
        PrivateDnsEnabled: true
        VpcId: ${self:custom.params.VPC_ID}
        SubnetIds: 
          - ${self:custom.params.SUBNET_ID_1}
        SecurityGroupIds:
          - !GetAtt VpcEndpointSG.GroupId

    VpcEndpointS3:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
        VpcEndpointType: Gateway
        VpcId: ${self:custom.params.VPC_ID}
        RouteTableIds:
          - ${self:custom.params.ROUTE_TABLE_ID_1}

    InstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

    InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
          - !Ref InstanceRole

    Instance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ${ssm:${self:custom.params.INSTANCE_AMI_ID}} # pulling value from SSM
        InstanceType: ${self:custom.params.INSTANCE_TYPE}
        IamInstanceProfile: !Ref InstanceProfile
        Tags:
          - Key: Name
            Value: ${self:custom.base}-ec2
        NetworkInterfaces:
          - AssociatePublicIpAddress: ${self:custom.params.ASSOCIATE_PUBLIC_IP_ADDRESS}
            DeviceIndex: '0'
            SubnetId: ${self:custom.params.SUBNET_ID_1}

    BastionUser:
      Type: AWS::IAM::User
      Properties:
        UserName: ${self:custom.base}-sls-bastion-user
        Policies:
          - PolicyName: ${self:custom.base}-userpolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: ec2:DescribeInstances
                  # ec2:DescribeInstances only supports '*'
                  # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html
                  Resource:
                    - "*"
                - Effect: Allow
                  Action: ec2-instance-connect:SendSSHPublicKey
                  Resource:
                    - Fn::Join:
                      - ''
                      - - 'arn:aws:ec2:'
                        - '${self:provider.region}:'
                        - Ref: AWS::AccountId
                        - ':instance/'
                        - Ref: Instance
                - Effect: Allow
                  Action:
                    - ssm:StartSession
                  Resource:
                    # - 'arn:aws:ec2:#{AWS::Region}:#{AWS::AccountId}:instance/${output:sls-bastion.InstanceId}'
                    - Fn::Join:
                      - ''
                      - - 'arn:aws:ec2:'
                        - '${self:provider.region}:'
                        - Ref: AWS::AccountId
                        - ':instance/'
                        - Ref: Instance
                    - arn:aws:ssm:*::document/AWS-StartSSHSession

    # BastionUserKeys:
    #   Type: AWS::IAM::AccessKey
    #   Properties:
    #     UserName: !Ref BastionUser
outputs:
  InstanceId: 
    Ref: Instance